
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package org.tsk.mng.taskmanagement.taskmanagementservice;

import java.util.Set;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.jws.soap.SOAPBinding.ParameterStyle;
import javax.xml.bind.annotation.XmlSeeAlso;

import org.apache.log4j.Logger;
import org.tsk.mng.backend.model.TaskBE;
import org.tsk.mng.backend.model.UserBE;
import org.tsk.mng.backend.service.TaskMangementBEService;
import org.tsk.mng.common.infra.SpringInitializer;
import org.tsk.mng.common.infra.TransformerUtil;
import org.tsk.mng.taskmanagement.common_elements.opertaionresultstatus.OperationResultStatus;
import org.tsk.mng.taskmanagement.common_elements.task.taskfe.TaskFE;
import org.tsk.mng.taskmanagement.common_elements.task.taskresult.TaskResult;
import org.tsk.mng.taskmanagement.common_elements.user.userfe.UserFE;
import org.tsk.mng.taskmanagement.common_elements.user.userresult.UserResult;
import static org.tsk.mng.frontend.infra.ResultFactory.*;

/**
 * This class was generated by Apache CXF 2.2
 * Wed Aug 22 02:38:07 IDT 2012
 * Generated source version: 2.2
 * 
 */

@javax.jws.WebService(
		serviceName = "TaskManagementService",
		portName = "TaskManagementServicePort",
		targetNamespace = "http://mng.tsk.org/taskManagement/TaskManagementService/",
		wsdlLocation = "http://localhost:8080/tsk-mng-frontend-0.0.1-REVISION/services/TaskManagementServicePort?wsdl",
		endpointInterface = "org.tsk.mng.taskmanagement.taskmanagementservice.TaskManagementServicePortType")

public class TaskManagementServicePortTypeImpl implements TaskManagementServicePortType {

	private static final Logger logger = Logger.getLogger(TaskManagementServicePortTypeImpl.class);

	/* (non-Javadoc)
	 * @see org.tsk.mng.taskmanagement.taskmanagementservice.TaskManagementServicePortType#getUserTasksOperation(org.tsk.mng.taskmanagement.header.soapheader.UserAuthInfo  soapHeader ,)org.tsk.mng.taskmanagement.task_management_wrapper.GetUserTasksTypeRequest  getUserTasksRequest )*
	 */
	public org.tsk.mng.taskmanagement.common_elements.task.taskresult.TaskResult getUserTasksOperation(org.tsk.mng.taskmanagement.header.soapheader.UserAuthInfo soapHeader,org.tsk.mng.taskmanagement.task_management_wrapper.GetUserTasksTypeRequest getUserTasksRequest) { 
		logger.info("Executing operation getUserTasksOperation");

		TaskResult result = null;

		try {

			TaskMangementBEService service = getTaskService();
			UserFE userToGetTasksFrom = getUserTasksRequest.getUser();
			UserBE userToGetTasksFromBE = TransformerUtil.dozerConvert(userToGetTasksFrom, UserBE.class);

			logger.info("going to get the Tasks of " + userToGetTasksFromBE); 
			
			//invoke service
			Set<TaskBE> tasks = service.getUserTasks(userToGetTasksFromBE);
			
			//adding the tasks collection to the UserBE and covert it to UserFE 
			userToGetTasksFromBE.setTasks(tasks);
			userToGetTasksFrom = TransformerUtil.dozerConvert(userToGetTasksFromBE, UserFE.class);
			
			logger.info("The Tasks of the user " + userToGetTasksFromBE + " has achived");
			result = createTaskResult("The tasks of the user " + userToGetTasksFromBE + " is included", OperationResultStatus.SUCCESS, userToGetTasksFrom.getTasks());

		} catch (Exception ex) {
			logger.error(ex.getMessage(),ex);
			result = createFailureTaskResult(ex.getMessage());
		}

		return result;
	}

	/* (non-Javadoc)
	 * @see org.tsk.mng.taskmanagement.taskmanagementservice.TaskManagementServicePortType#updateTaskOperation(org.tsk.mng.taskmanagement.header.soapheader.UserAuthInfo  soapHeader ,)org.tsk.mng.taskmanagement.task_management_wrapper.UpdateTaskElemetRequest  updateTaskRequest )*
	 */
	public org.tsk.mng.taskmanagement.common_elements.task.taskresult.TaskResult updateTaskOperation(org.tsk.mng.taskmanagement.header.soapheader.UserAuthInfo soapHeader,org.tsk.mng.taskmanagement.task_management_wrapper.UpdateTaskElemetRequest updateTaskRequest) { 
		logger.info("Executing operation updateTaskOperation");

		TaskResult result;
		
		try {
			TaskMangementBEService service = getTaskService();
			TaskFE taskToUpdate = updateTaskRequest.getTask();
			TaskBE taskToUpdateBE = TransformerUtil.dozerConvert(taskToUpdate, TaskBE.class);
			
			logger.info("going to update task: " + taskToUpdateBE);
			
			//invoke service
			taskToUpdateBE = service.updateTask(taskToUpdateBE);
			taskToUpdate = TransformerUtil.dozerConvert(taskToUpdateBE, TaskFE.class);
			
			String msg = "Task " + taskToUpdateBE + " has updated successfully";
			logger.info(msg);
			result = createTaskResult(msg, OperationResultStatus.SUCCESS, taskToUpdate);
		
		} catch (Exception ex) {
			logger.error(ex.getMessage(),ex);
			result = createFailureTaskResult(ex.getMessage());
		}
		
		return result;
	}

	/* (non-Javadoc)
	 * @see org.tsk.mng.taskmanagement.taskmanagementservice.TaskManagementServicePortType#assignUserToTaskOperation(org.tsk.mng.taskmanagement.header.soapheader.UserAuthInfo  soapHeader ,)org.tsk.mng.taskmanagement.task_management_wrapper.AssignUserToTaskTypeRequest  assignUserToTaskRequest )*
	 */
	public org.tsk.mng.taskmanagement.common_elements.user.userresult.UserResult assignUserToTaskOperation(org.tsk.mng.taskmanagement.header.soapheader.UserAuthInfo soapHeader,org.tsk.mng.taskmanagement.task_management_wrapper.AssignUserToTaskTypeRequest assignUserToTaskRequest) { 
		logger.info("Executing operation assignUserToTaskOperation");

		UserResult result;
		
		try {
			TaskMangementBEService service = getTaskService();
			
			UserFE usertoAssignTo = assignUserToTaskRequest.getUser();
			TaskFE taskToAssignToUser = assignUserToTaskRequest.getTask();
			UserBE userToAssignToBE = TransformerUtil.dozerConvert(usertoAssignTo, UserBE.class);
			TaskBE taskToAssignToUserBE = TransformerUtil.dozerConvert(taskToAssignToUser, TaskBE.class);
			
			logger.info("Trying to assign " + taskToAssignToUserBE + " to " + userToAssignToBE);
			//invoke service
			userToAssignToBE = service.assignUserToTask(userToAssignToBE, taskToAssignToUserBE);
			usertoAssignTo = TransformerUtil.dozerConvert(userToAssignToBE, UserFE.class);
			
			String msg = "Task " + taskToAssignToUserBE + " assigned to " + userToAssignToBE;
			logger.info(msg);
			result = createUserResult(msg,OperationResultStatus.SUCCESS , usertoAssignTo);
		
		} catch (Exception ex) {
			logger.error(ex.getMessage(),ex);
			result = createFailureUserResult(ex.getMessage());
		}
		
		return result;
	}

	/* (non-Javadoc)
	 * @see org.tsk.mng.taskmanagement.taskmanagementservice.TaskManagementServicePortType#addDependencyOperation(org.tsk.mng.taskmanagement.header.soapheader.UserAuthInfo  soapHeader ,)org.tsk.mng.taskmanagement.task_management_wrapper.AddDependencyElemetRequest  addDependencyRequest )*
	 */
	public org.tsk.mng.taskmanagement.common_elements.user.userresult.UserResult addDependencyOperation(org.tsk.mng.taskmanagement.header.soapheader.UserAuthInfo soapHeader,org.tsk.mng.taskmanagement.task_management_wrapper.AddDependencyElemetRequest addDependencyRequest) { 
		logger.info("Executing operation addDependencyOperation");

		UserResult result;
		
		try {
			TaskMangementBEService service = getTaskService();
			TaskFE dependedTask = addDependencyRequest.getDependedTask();
			TaskFE task = addDependencyRequest.getTask();
			TaskBE dependedTaskBE = TransformerUtil.dozerConvert(dependedTask, TaskBE.class);
			TaskBE taskBE = TransformerUtil.dozerConvert(task, TaskBE.class);
			
			logger.info("Trying to add Task: " + dependedTask + " as depended on The Task: " + taskBE);
			//invoke service
			UserBE updatedUserBE = service.addDependencyToTask(taskBE, dependedTaskBE);
			UserFE updatedUser = TransformerUtil.dozerConvert(updatedUserBE, UserFE.class);
			
			String msg = "The User " + updatedUserBE + " has updated with : " +
					" Task: " + dependedTaskBE + " depended on Task: " + taskBE;
			
			logger.info(msg);
			result = createUserResult(msg, OperationResultStatus.SUCCESS, updatedUser);
			
		} catch (Exception ex) {
			logger.error(ex.getMessage(),ex);
			result = createFailureUserResult(ex.getMessage());
		}
		
		return result;
	}

	/* (non-Javadoc)
	 * @see org.tsk.mng.taskmanagement.taskmanagementservice.TaskManagementServicePortType#removeTaskFromUserOperation(org.tsk.mng.taskmanagement.header.soapheader.UserAuthInfo  soapHeader ,)org.tsk.mng.taskmanagement.task_management_wrapper.RemoveTaskFromUserElementRequest  removeTaskFromUserRequest )*
	 */
	public org.tsk.mng.taskmanagement.common_elements.task.taskresult.TaskResult removeTaskFromUserOperation(org.tsk.mng.taskmanagement.header.soapheader.UserAuthInfo soapHeader,org.tsk.mng.taskmanagement.task_management_wrapper.RemoveTaskFromUserElementRequest removeTaskFromUserRequest) { 
		logger.info("Executing operation removeTaskFromUserOperation");

		TaskResult result;
		
		try {
			TaskMangementBEService service = getTaskService();
			TaskFE taskToRemove = removeTaskFromUserRequest.getTask();
			UserFE userToRemoveTaskFrom = removeTaskFromUserRequest.getUser();
			TaskBE taskToRemoveBE = TransformerUtil.dozerConvert(taskToRemove, TaskBE.class);
			UserBE userToRemoveTaskFromBE = TransformerUtil.dozerConvert(userToRemoveTaskFrom, UserBE.class);
			
			logger.info("Trying to remove " + taskToRemoveBE + " from User: " + userToRemoveTaskFromBE);
			//invoke service
			taskToRemoveBE = service.removeTaskFromUser(userToRemoveTaskFromBE, taskToRemoveBE);
			taskToRemove = TransformerUtil.dozerConvert(taskToRemoveBE, TaskFE.class);
			
			String msg = "The Task: " + taskToRemoveBE + " has removed successfully from the User: " + userToRemoveTaskFromBE;
			logger.info(msg);
			result = createTaskResult(msg, OperationResultStatus.SUCCESS, taskToRemove);
			
		} catch (Exception ex) {
			logger.error(ex.getMessage(),ex);
			result = createFailureTaskResult(ex.getMessage());
		}
		
		return result;
	}

	protected TaskMangementBEService getTaskService() {
		return SpringInitializer.getBean(TaskMangementBEService.class);
	}
}
