
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package org.tsk.mng.taskmanagement.usermanagementservice;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.jws.soap.SOAPBinding.ParameterStyle;
import javax.xml.bind.annotation.XmlSeeAlso;

import org.apache.log4j.Logger;
import org.tsk.mng.backend.model.UserBE;
import org.tsk.mng.backend.service.UserManagementBEService;
import org.tsk.mng.common.infra.SpringInitializer;
import org.tsk.mng.common.infra.TransformerUtil;
import org.tsk.mng.taskmanagement.common_elements.opertaionresultstatus.OperationResultStatus;
import org.tsk.mng.taskmanagement.common_elements.user.userfe.UserFE;
import org.tsk.mng.taskmanagement.common_elements.user.userresult.UserResult;
import org.tsk.mng.taskmanagement.header.soapheader.UserAuthInfo;
import static org.tsk.mng.frontend.infra.ResultFactory.*;

/**
 * This class was generated by Apache CXF 2.2
 * Wed Aug 22 02:38:07 IDT 2012
 * Generated source version: 2.2
 * 
 */

@javax.jws.WebService(
		serviceName = "UserManagementService",
		portName = "UserManagementServicePort",
		targetNamespace = "http://mng.tsk.org/taskManagement/UserManagementService/",
		wsdlLocation = "http://localhost:8080/tsk-mng-frontend-0.0.1-REVISION/services/UserManagementServicePort?wsdl",
		endpointInterface = "org.tsk.mng.taskmanagement.usermanagementservice.UserManagementServicePortType")

public class UserManagementServicePortTypeImpl implements UserManagementServicePortType {

	private static final Logger logger = Logger.getLogger(UserManagementServicePortTypeImpl.class);


	/**
	 * This methods verify user authentication
	 * this methods has invoke in each start of WebSerivce method. 
	 *
	 * @return UserResult with status about whether user authenticates or does not
	 */
	//@Override TODO move it to AuthFilter
	public UserResult isAuthenticate(UserAuthInfo userToAuthenticate) {

		try {

			UserManagementBEService servcie = getUserService();

			UserBE useBeToAuth = TransformerUtil.dozerConvert(userToAuthenticate, UserBE.class);

			UserBE authenticateUser = servcie.authenticate(useBeToAuth);
			if (authenticateUser != null) {//is authenticated
				UserFE authenticatedUser = TransformerUtil.dozerConvert(userToAuthenticate, UserFE.class);
				return createUserResult("user is authenticated", OperationResultStatus.SUCCESS,authenticatedUser);
			}

			return createFailureUserResult("Authentication error occur");

		} catch (Exception e) {
			//TODO logger
			return createFailureUserResult(e.getMessage());
		}
	}


	/*
	 * Web Service Methods
	 */

	/* (non-Javadoc)
	 * @see org.tsk.mng.taskmanagement.usermanagementservice.UserManagementServicePortType#addSuperiorToUserOperation(org.tsk.mng.taskmanagement.header.soapheader.UserAuthInfo  soapHeader ,)org.tsk.mng.taskmanagement.usermanagementwrapper.AddSuperiorToUserTypeRequest  addSuperiorToUserRequest )*
	 */
	public org.tsk.mng.taskmanagement.common_elements.user.userresult.UserResult addSuperiorToUserOperation(org.tsk.mng.taskmanagement.header.soapheader.UserAuthInfo soapHeader,org.tsk.mng.taskmanagement.usermanagementwrapper.AddSuperiorToUserTypeRequest addSuperiorToUserRequest) { 
		logger.info("Executing operation addSuperiorToUserOperation");

		UserResult result;

		//TODO what about soap header

		try {
			//get user service
			UserManagementBEService service = getUserService();

			//getting users from the operation request wrapper
			UserFE superior = addSuperiorToUserRequest.getSuperior();
			UserFE worker = addSuperiorToUserRequest.getWorker();
			//transform from userfe to userbe
			UserBE superiorBE = TransformerUtil.dozerConvert(superior, UserBE.class);
			UserBE workerBE = TransformerUtil.dozerConvert(worker, UserBE.class);

			//invoke service
			workerBE = service.addSuperiorToUser(soapHeader.getUserName(), superiorBE, workerBE);
			worker = TransformerUtil.dozerConvert(workerBE, UserFE.class);

			logger.info("adding superior to worker has succeeded");
			result = createUserResult("Operation Succeeded" , OperationResultStatus.SUCCESS, worker);

		} catch (Exception ex) {
			logger.error(ex.getMessage(),ex);
			result = createFailureUserResult(ex.getMessage());
		}
	
		return result;
	}

	/* (non-Javadoc)
	 * @see org.tsk.mng.taskmanagement.usermanagementservice.UserManagementServicePortType#createUserOperation(org.tsk.mng.taskmanagement.header.soapheader.UserAuthInfo  soapHeader ,)org.tsk.mng.taskmanagement.usermanagementwrapper.CreateUserTypeRequest  createUserRequest )*
	 */
	public org.tsk.mng.taskmanagement.common_elements.user.userresult.UserResult createUserOperation(org.tsk.mng.taskmanagement.header.soapheader.UserAuthInfo soapHeader,org.tsk.mng.taskmanagement.usermanagementwrapper.CreateUserTypeRequest createUserRequest) { 
		logger.info("Executing operation createUserOperation");

		UserResult result;

		//TODO soapheader - soap header does not relevant since it's create (first action in the flow)

		try {
			UserManagementBEService service = getUserService();
			UserFE userToCreate = createUserRequest.getUser();
			UserBE userToCreateBE = TransformerUtil.dozerConvert(userToCreate, UserBE.class);

			logger.info("going to create user " + userToCreateBE + " by serivce");
			//invoke service
			userToCreateBE = service.createUser(soapHeader.getUserName(), userToCreateBE);
			userToCreate = TransformerUtil.dozerConvert(userToCreateBE, UserFE.class);

			String msg = "User " + userToCreateBE + " has created successfully";
			logger.info(msg);
			result = createUserResult(msg, OperationResultStatus.SUCCESS, userToCreate);

		} catch (Exception ex) {
			logger.error(ex.getMessage(),ex);
			result = createFailureUserResult(ex.getMessage());
		}

		return result;
	}		


	/* (non-Javadoc)
	 * @see org.tsk.mng.taskmanagement.usermanagementservice.UserManagementServicePortType#deleteUserOperation(org.tsk.mng.taskmanagement.header.soapheader.UserAuthInfo  soapHeader ,)org.tsk.mng.taskmanagement.usermanagementwrapper.DeleteUserTypeRequest  deleteUserRequest )*
	 */
	public org.tsk.mng.taskmanagement.common_elements.user.userresult.UserResult deleteUserOperation(org.tsk.mng.taskmanagement.header.soapheader.UserAuthInfo soapHeader,org.tsk.mng.taskmanagement.usermanagementwrapper.DeleteUserTypeRequest deleteUserRequest) { 
		logger.info("Executing operation deleteUserOperation");

		UserResult result;

		try {
			UserManagementBEService service = getUserService();
			UserFE userToDelete = deleteUserRequest.getUser();
			UserBE userToDeleteBE = TransformerUtil.dozerConvert(userToDelete, UserBE.class);

			//invoke service
			userToDeleteBE = service.deleteUser(soapHeader.getUserName(), userToDeleteBE);
			userToDelete = TransformerUtil.dozerConvert(userToDeleteBE, UserFE.class);

			String msg = "delete user " + userToDeleteBE + " successfully";
			logger.info(msg);
			result = createUserResult(msg, OperationResultStatus.SUCCESS, userToDelete);

		} catch (Exception ex) {
			logger.error(ex.getMessage(),ex);
			result = createFailureUserResult(ex.getMessage());
		}

		return result;
	}

	/* (non-Javadoc)
	 * @see org.tsk.mng.taskmanagement.usermanagementservice.UserManagementServicePortType#updateUserOperation(org.tsk.mng.taskmanagement.header.soapheader.UserAuthInfo  soapHeader ,)org.tsk.mng.taskmanagement.usermanagementwrapper.UpdateUserTypeRequest  updateUserRequest )*
	 */
	public org.tsk.mng.taskmanagement.common_elements.user.userresult.UserResult updateUserOperation(org.tsk.mng.taskmanagement.header.soapheader.UserAuthInfo soapHeader,org.tsk.mng.taskmanagement.usermanagementwrapper.UpdateUserTypeRequest updateUserRequest) { 
		logger.info("Executing operation updateUserOperation");

		UserResult result;

		try {
			UserManagementBEService service = getUserService();
			UserFE userToUpdate = updateUserRequest.getUser();
			UserBE userToUpdateBE = TransformerUtil.dozerConvert(userToUpdate, UserBE.class);
			//invoke serivce
			userToUpdateBE = service.updateUser(soapHeader.getUserName(), userToUpdateBE);
			userToUpdate = TransformerUtil.dozerConvert(userToUpdateBE, UserFE.class);

			String msg = "User " + userToUpdateBE  + " has updated successfully";
			logger.info(msg);
			result = createUserResult(msg, OperationResultStatus.SUCCESS, userToUpdate);

		} catch (Exception ex) {
			logger.error(ex.getMessage(),ex);
			result = createFailureUserResult(ex.getMessage());
		}

		return result;
	}

	/* (non-Javadoc)
	 * @see org.tsk.mng.taskmanagement.usermanagementservice.UserManagementServicePortType#readUserOperation(org.tsk.mng.taskmanagement.header.soapheader.UserAuthInfo  soapHeader ,)org.tsk.mng.taskmanagement.usermanagementwrapper.ReadUserTypeRequest  readUserRequest )*
	 */
	public org.tsk.mng.taskmanagement.common_elements.user.userresult.UserResult readUserOperation(org.tsk.mng.taskmanagement.header.soapheader.UserAuthInfo soapHeader,org.tsk.mng.taskmanagement.usermanagementwrapper.ReadUserTypeRequest readUserRequest) { 
		logger.info("Executing operation readUserOperation");

		UserResult result;

		try	{
			UserManagementBEService service = getUserService();
			String userNameToRead = readUserRequest.getUser();
			//invoke service
			UserBE readedUser = service.readUser(userNameToRead);
			UserFE userToRet = TransformerUtil.dozerConvert(readedUser, UserFE.class);
			
			logger.info("User read has succeded, returning User : " + userToRet );
			result = createUserResult("User has been found", OperationResultStatus.SUCCESS, userToRet);

		} catch(Exception ex) {
			logger.error(ex.getMessage(),ex);
			return createFailureUserResult(ex.getMessage());
		}			
		
		return result;
	}

	protected UserManagementBEService getUserService() {
		return SpringInitializer.getBean(UserManagementBEService.class);
	}
}
